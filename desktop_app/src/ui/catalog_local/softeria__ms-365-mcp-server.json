{
  "dxt_version": "0.1.0",
  "name": "softeria__ms-365-mcp-server",
  "display_name": "ms-365-mcp-server",
  "version": "1.0.0",
  "description": "A Model Context Protocol (MCP) server for interacting with Microsoft 365 and Office services through the Graph API",
  "author": {
    "name": "softeria"
  },
  "server": {
    "command": "unknown",
    "args": [],
    "env": {}
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# ms-365-mcp-server\n\n[![npm version](https://img.shields.io/npm/v/@softeria/ms-365-mcp-server.svg)](https://www.npmjs.com/package/@softeria/ms-365-mcp-server) [![build status](https://github.com/softeria/ms-365-mcp-server/actions/workflows/build.yml/badge.svg)](https://github.com/softeria/ms-365-mcp-server/actions/workflows/build.yml) [![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/softeria/ms-365-mcp-server/blob/main/LICENSE)\n\nMicrosoft 365 MCP Server\n\nA Model Context Protocol (MCP) server for interacting with Microsoft 365 and Microsoft Office services through the Graph\nAPI.\n\n## Prerequisites\n\n- Node.js >= 20 (recommended)\n- Node.js 14+ may work with dependency warnings\n\n## Features\n\n- Authentication via Microsoft Authentication Library (MSAL)\n- Comprehensive Microsoft 365 service integration\n- Read-only mode support for safe operations\n- Tool filtering for granular access control\n\n## Supported Services & Tools\n\n### Personal Account Tools (Available by default)\n\n**Email (Outlook)**  \n<sub>list-mail-messages, list-mail-folders, list-mail-folder-messages, get-mail-message, send-mail,\ndelete-mail-message, create-draft-email, move-mail-message</sub>\n\n**Calendar**  \n<sub>list-calendars, list-calendar-events, get-calendar-event, get-calendar-view, create-calendar-event,\nupdate-calendar-event, delete-calendar-event</sub>\n\n**OneDrive Files**  \n<sub>list-drives, get-drive-root-item, list-folder-files, download-onedrive-file-content, upload-file-content,\nupload-new-file, delete-onedrive-file</sub>\n\n**Excel Operations**  \n<sub>list-excel-worksheets, get-excel-range, create-excel-chart, format-excel-range, sort-excel-range</sub>\n\n**OneNote**  \n<sub>list-onenote-notebooks, list-onenote-notebook-sections, list-onenote-section-pages, get-onenote-page-content,\ncreate-onenote-page</sub>\n\n**To Do Tasks**  \n<sub>list-todo-task-lists, list-todo-tasks, get-todo-task, create-todo-task, update-todo-task, delete-todo-task</sub>\n\n**Planner**  \n<sub>list-planner-tasks, get-planner-plan, list-plan-tasks, get-planner-task, create-planner-task</sub>\n\n**Contacts**  \n<sub>list-outlook-contacts, get-outlook-contact, create-outlook-contact, update-outlook-contact,\ndelete-outlook-contact</sub>\n\n**User Profile**  \n<sub>get-current-user</sub>\n\n**Search**  \n<sub>search-query</sub>\n\n### Organization Account Tools (Requires --org-mode flag)\n\n**Teams & Chats**  \n<sub>list-chats, get-chat, list-chat-messages, get-chat-message, send-chat-message, list-chat-message-replies,\nreply-to-chat-message, list-joined-teams, get-team, list-team-channels, get-team-channel, list-channel-messages,\nget-channel-message, send-channel-message, list-team-members</sub>\n\n**SharePoint Sites**  \n<sub>search-sharepoint-sites, get-sharepoint-site, get-sharepoint-site-by-path, list-sharepoint-site-drives,\nget-sharepoint-site-drive-by-id, list-sharepoint-site-items, get-sharepoint-site-item, list-sharepoint-site-lists,\nget-sharepoint-site-list, list-sharepoint-site-list-items, get-sharepoint-site-list-item,\nget-sharepoint-sites-delta</sub>\n\n## Organization/Work Mode\n\nTo access work/school features (Teams, SharePoint, etc.), enable organization mode using any of these flags:\n\n```json\n{\n  \"mcpServers\": {\n    \"ms365\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@softeria/ms-365-mcp-server\", \"--org-mode\"]\n    }\n  }\n}\n```\n\nOrganization mode must be enabled from the start to access work account features. Without this flag, only personal\naccount features (email, calendar, OneDrive, etc.) are available.\n\n## Quick Start Example\n\nTest login in Claude Desktop:\n\n![Login example](https://github.com/user-attachments/assets/27f57f0e-57b8-4366-a8d1-c0bdab79900c)\n\n## Examples\n\n![Image](https://github.com/user-attachments/assets/ed275100-72e8-4924-bcf2-cd8e1b4c6f3a)\n\n## Integration\n\n### Claude Desktop\n\nTo add this MCP server to Claude Desktop:\n\nEdit the config file under Settings > Developer:\n\n```json\n{\n  \"mcpServers\": {\n    \"ms365\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@softeria/ms-365-mcp-server\"]\n    }\n  }\n}\n```\n\n### Claude Code CLI\n\n```bash\nclaude mcp add ms365 -- npx -y @softeria/ms-365-mcp-server\n```\n\nFor other interfaces that support MCPs, please refer to their respective documentation for the correct\nintegration method.\n\n### Authentication\n\n> ⚠️ You must authenticate before using tools.\n\nThe server supports three authentication methods:\n\n#### 1. Device Code Flow (Default)\n\nFor interactive authentication via device code:\n\n- **MCP client login**:\n  - Call the `login` tool (auto-checks existing token)\n  - If needed, get URL+code, visit in browser\n  - Use `verify-login` tool to confirm\n- **CLI login**:\n  ```bash\n  npx @softeria/ms-365-mcp-server --login\n  ```\n  Follow the URL and code prompt in the terminal.\n\nTokens are cached securely in your OS credential store (fallback to file).\n\n#### 2. OAuth Authorization Code Flow (HTTP mode only)\n\nWhen running with `--http`, the server **requires** OAuth authentication:\n\n```bash\nnpx @softeria/ms-365-mcp-server --http 3000\n```\n\nThis mode:\n\n- Advertises OAuth capabilities to MCP clients\n- Provides OAuth endpoints at `/auth/*` (authorize, token, metadata)\n- **Requires** `Authorization: Bearer <token>` for all MCP requests\n- Validates tokens with Microsoft Graph API\n- **Disables** login/logout tools by default (use `--enable-auth-tools` to enable them)\n\nMCP clients will automatically handle the OAuth flow when they see the advertised capabilities.\n\n##### Setting up Azure AD for OAuth Testing\n\nTo use OAuth mode with custom Azure credentials (recommended for production), you'll need to set up an Azure AD app\nregistration:\n\n1. **Create Azure AD App Registration**:\n\n- Go to [Azure Portal](https://portal.azure.com)\n- Navigate to Azure Active Directory → App registrations → New registration\n- Set name: \"MS365 MCP Server\"\n\n1. **Configure Redirect URIs**:\n   Add these redirect URIs for testing with MCP Inspector (`npm run inspector`):\n\n- `http://localhost:6274/oauth/callback`\n- `http://localhost:6274/oauth/callback/debug`\n- `http://localhost:3000/callback` (optional, for server callback)\n\n1. **Get Credentials**:\n\n- Copy the **Application (client) ID** from Overview page\n- Go to Certificates & secrets → New client secret → Copy the secret value\n\n1. **Configure Environment Variables**:\n   Create a `.env` file in your project root:\n   ```env\n   MS365_MCP_CLIENT_ID=your-azure-ad-app-client-id-here\n   MS365_MCP_CLIENT_SECRET=your-azure-ad-app-client-secret-here\n   MS365_MCP_TENANT_ID=common\n   ```\n\nWith these configured, the server will use your custom Azure app instead of the built-in one.\n\n#### 3. Bring Your Own Token (BYOT)\n\nIf you are running ms-365-mcp-server as part of a larger system that manages Microsoft OAuth tokens externally, you can\nprovide an access token directly to this MCP server:\n\n```bash\nMS365_MCP_OAUTH_TOKEN=your_oauth_token npx @softeria/ms-365-mcp-server\n```\n\nThis method:\n\n- Bypasses the interactive authentication flows\n- Use your pre-existing OAuth token for Microsoft Graph API requests\n- Does not handle token refresh (token lifecycle management is your responsibility)\n\n> **Note**: HTTP mode requires authentication. For unauthenticated testing, use stdio mode with device code flow.\n>\n> **Authentication Tools**: In HTTP mode, login/logout tools are disabled by default since OAuth handles authentication.\n> Use `--enable-auth-tools` if you need them available.\n\n## CLI Options\n\nThe following options can be used when running ms-365-mcp-server directly from the command line:\n\n```\n--login           Login using device code flow\n--logout          Log out and clear saved credentials\n--verify-login    Verify login without starting the server\n--org-mode        Enable organization/work mode from start (includes Teams, SharePoint, etc.)\n--work-mode       Alias for --org-mode\n--force-work-scopes Backwards compatibility alias for --org-mode (deprecated)\n```\n\n### Server Options\n\nWhen running as an MCP server, the following options can be used:\n\n```\n-v                Enable verbose logging\n--read-only       Start server in read-only mode, disabling write operations\n--http [port]     Use Streamable HTTP transport instead of stdio (optionally specify port, default: 3000)\n                  Starts Express.js server with MCP endpoint at /mcp\n--enable-auth-tools Enable login/logout tools when using HTTP mode (disabled by default in HTTP mode)\n--enabled-tools <pattern> Filter tools using regex pattern (e.g., \"excel|contact\" to enable Excel and Contact tools)\n```\n\nEnvironment variables:\n\n- `READ_ONLY=true|1`: Alternative to --read-only flag\n- `ENABLED_TOOLS`: Filter tools using a regex pattern (alternative to --enabled-tools flag)\n- `MS365_MCP_ORG_MODE=true|1`: Enable organization/work mode (alternative to --org-mode flag)\n- `MS365_MCP_FORCE_WORK_SCOPES=true|1`: Backwards compatibility for MS365_MCP_ORG_MODE\n- `LOG_LEVEL`: Set logging level (default: 'info')\n- `SILENT=true|1`: Disable console output\n- `MS365_MCP_CLIENT_ID`: Custom Azure app client ID (defaults to built-in app)\n- `MS365_MCP_TENANT_ID`: Custom tenant ID (defaults to 'common' for multi-tenant)\n- `MS365_MCP_OAUTH_TOKEN`: Pre-existing OAuth token for Microsoft Graph API (BYOT method)\n\n## Contributing\n\nWe welcome contributions! Before submitting a pull request, please ensure your changes meet our quality standards.\n\nRun the verification script to check all code quality requirements:\n\n```bash\nnpm run verify\n```\n\n## Support\n\nIf you're having problems or need help:\n\n- Create an [issue](https://github.com/softeria/ms-365-mcp-server/issues)\n- Start a [discussion](https://github.com/softeria/ms-365-mcp-server/discussions)\n- Email: eirikb@eirikb.no\n- Discord: https://discord.gg/WvGVNScrAZ or @eirikb\n\n## License\n\nMIT © 2025 Softeria\n",
  "category": "Enterprise",
  "quality_score": 62,
  "archestra_config": {
    "client_config_permutations": {
      "softeria-ms-365-mcp-server": {
        "command": "npx",
        "args": ["-y", "@softeria/ms-365-mcp-server"],
        "env": {}
      },
      "softeria-ms-365-mcp-server-org-mode": {
        "command": "npx",
        "args": ["-y", "@softeria/ms-365-mcp-server", "--org-mode"],
        "env": {}
      },
      "softeria-ms-365-mcp-server-http": {
        "command": "npx",
        "args": ["-y", "@softeria/ms-365-mcp-server", "--http", "3000"],
        "env": {}
      },
      "softeria-ms-365-mcp-server-byot": {
        "command": "npx",
        "args": ["-y", "@softeria/ms-365-mcp-server"],
        "env": {
          "MS365_MCP_OAUTH_TOKEN": "your_oauth_token"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "softeria",
    "repo": "ms-365-mcp-server",
    "url": "https://github.com/softeria/ms-365-mcp-server",
    "name": "ms-365-mcp-server",
    "path": null,
    "stars": 194,
    "contributors": 10,
    "issues": 0,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "715b58ac75082ce44973a7f1b7c75765c6a5f58b"
  },
  "programming_language": "TypeScript",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:33:39.866Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "@azure/msal-node",
      "importance": 8
    },
    {
      "name": "@modelcontextprotocol/sdk",
      "importance": 10
    },
    {
      "name": "commander",
      "importance": 7
    },
    {
      "name": "dotenv",
      "importance": 6
    },
    {
      "name": "express",
      "importance": 10
    },
    {
      "name": "js-yaml",
      "importance": 5
    },
    {
      "name": "keytar",
      "importance": 8
    },
    {
      "name": "winston",
      "importance": 6
    },
    {
      "name": "zod",
      "importance": 7
    }
  ],
  "raw_dependencies": "=== package.json ===\n{\n  \"name\": \"@softeria/ms-365-mcp-server\",\n  \"version\": \"0.0.0-development\",\n  \"description\": \" A Model Context Protocol (MCP) server for interacting with Microsoft 365 and Office services through the Graph API\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.js\",\n  \"bin\": {\n    \"ms-365-mcp-server\": \"dist/index.js\"\n  },\n  \"scripts\": {\n    \"generate\": \"node bin/generate-graph-client.mjs\",\n    \"postinstall\": \"npm run generate\",\n    \"build\": \"tsup\",\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"dev\": \"tsx src/index.ts\",\n    \"dev:http\": \"tsx --watch src/index.ts --http 3000 -v\",\n    \"format\": \"prettier --write \\\"**/*.{ts,mts,js,mjs,json,md}\\\"\",\n    \"format:check\": \"prettier --check \\\"**/*.{ts,mts,js,mjs,json,md}\\\"\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint . --fix\",\n    \"verify\": \"npm run generate && npm run lint && npm run format:check && npm run build && npm run test\",\n    \"inspector\": \"npx @modelcontextprotocol/inspector tsx src/index.ts\"\n  },\n  \"keywords\": [\n    \"microsoft\",\n    \"365\",\n    \"mcp\",\n    \"server\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"dependencies\": {\n    \"@azure/msal-node\": \"^2.1.0\",\n    \"@modelcontextprotocol/sdk\": \"^1.8.0\",\n    \"commander\": \"^11.1.0\",\n    \"dotenv\": \"^17.0.1\",\n    \"express\": \"^5.1.0\",\n    \"js-yaml\": \"^4.1.0\",\n    \"keytar\": \"^7.9.0\",\n    \"winston\": \"^3.17.0\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@redocly/cli\": \"^1.34.3\",\n    \"@semantic-release/exec\": \"^7.1.0\",\n    \"@semantic-release/git\": \"^10.0.1\",\n    \"@semantic-release/github\": \"^11.0.3\",\n    \"@semantic-release/npm\": \"^12.0.2\",\n    \"@types/express\": \"^5.0.3\",\n    \"@types/node\": \"^22.15.15\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.38.0\",\n    \"@typescript-eslint/parser\": \"^8.38.0\",\n    \"eslint\": \"^9.31.0\",\n    \"globals\": \"^16.3.0\",\n    \"prettier\": \"^3.5.3\",\n    \"semantic-release\": \"^24.2.7\",\n    \"tsup\": \"^8.5.0\",\n    \"tsx\": \"^4.19.4\",\n    \"typescript\": \"^5.8.3\",\n    \"vitest\": \"^3.1.1\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/softeria/ms-365-mcp-server.git\"\n  }\n}\n"
}
