// This file is auto-generated by @hey-api/openapi-ts

export type ToolAnalysisResultInput = {
  is_read: boolean;
  is_write: boolean;
  idempotent: boolean;
  reversible: boolean;
};

export type ToolInput = {
  id: string;
  mcp_server_id: string;
  name: string;
  description: string | null;
  input_schema:
    | (
        | (string | number | boolean | null)
        | {
            [key: string]: unknown;
          }
        | Array<unknown>
      )
    | null;
  is_read: boolean | null;
  is_write: boolean | null;
  idempotent: boolean | null;
  reversible: boolean | null;
  analyzed_at: string | null;
  created_at: string;
  updated_at: string;
};

export type SandboxStatusSummaryInput = {
  status: 'not_installed' | 'initializing' | 'running' | 'error' | 'stopping' | 'stopped';
  runtime: {
    startupPercentage: number;
    startupMessage: string | null;
    startupError: string | null;
  };
  mcpServers: {
    [key: string]: {
      container: PodmanContainerStatusSummaryInput;
      tools: Array<AvailableToolInput>;
    };
  };
  allAvailableTools?: Array<AvailableToolInput>;
};

export type PodmanContainerStatusSummaryInput = {
  startupPercentage: number;
  state:
    | 'not_created'
    | 'created'
    | 'initializing'
    | 'running'
    | 'error'
    | 'restarting'
    | 'stopping'
    | 'stopped'
    | 'exited';
  message: string | null;
  error: string | null;
};

export type OllamaModelDownloadProgressInput = {
  model: string;
  status: 'downloading' | 'verifying' | 'completed' | 'error';
  progress: number;
  message: string;
};

export type WebSocketMessageInput =
  | {
      type: 'chat-title-updated';
      payload: {
        chatId: number;
        title: string;
      };
    }
  | {
      type: 'sandbox-status-update';
      payload: SandboxStatusSummaryInput;
    }
  | {
      type: 'ollama-model-download-progress';
      payload: OllamaModelDownloadProgressInput;
    }
  | {
      type: 'memory-updated';
      payload: {
        memories: Array<{
          id: number;
          name: string;
          value: string;
          createdAt: string;
          updatedAt: string;
        }>;
      };
    };

export type ChatWithMessagesInput = {
  id: number;
  sessionId: string;
  title: string | null;
  createdAt: string;
  updatedAt: string;
  messages: Array<{
    id: string;
    chatId: number;
    role: 'user' | 'assistant' | 'system';
    content: unknown;
    createdAt: string;
  }>;
};

export type CloudProviderWithConfigInput = {
  type: SupportedCloudProvidersInput;
  name: string;
  apiKeyUrl: string;
  apiKeyPlaceholder: string;
  baseUrl: string;
  models: Array<string>;
  headers?: {
    [key: string]: string;
  };
  configured: boolean;
  enabled: boolean;
  validatedAt: string | null;
};

export type SupportedCloudProvidersInput = 'anthropic' | 'openai' | 'deepseek' | 'gemini' | 'ollama';

export type SupportedCloudProviderModelInput = {
  id: string;
  provider: SupportedCloudProvidersInput;
};

export type ExternalMcpClientInput = {
  clientName: string;
  createdAt: string;
};

export type ExternalMcpClientNameInput = 'claude' | 'cursor' | 'vscode';

export type McpRequestLogInput = {
  id: number;
  requestId: string;
  sessionId: string | null;
  mcpSessionId: string | null;
  serverName: string;
  clientInfo: {
    userAgent?: string;
    clientName?: string;
    clientVersion?: string;
    clientPlatform?: string;
  };
  method: string | null;
  requestHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  requestBody: string | null;
  responseBody: string | null;
  responseHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  statusCode: number;
  errorMessage: string | null;
  durationMs: number | null;
  timestamp: string;
};

export type McpRequestLogStatsInput = {
  totalRequests: number;
  successCount: number;
  errorCount: number;
  avgDurationMs: number;
  requestsPerServer: {
    [key: string]: number;
  };
};

export type McpRequestLogFilterStatusInput = 'HTTP 200' | 'HTTP 40x' | 'HTTP 50x';

export type McpServerConfigInput = {
  command: string;
  args?: Array<string>;
  env?: {
    [key: string]: string;
  };
};

export type McpServerUserConfigValuesInput = {
  [key: string]: string | number | boolean | Array<string>;
};

export type McpServerInput = {
  id: string;
  name: string;
  serverConfig: McpServerConfigInput;
  userConfigValues: McpServerUserConfigValuesInput | null;
  oauthAccessToken: string | null;
  oauthRefreshToken: string | null;
  oauthExpiryDate: string | null;
  oauthDiscoveryMetadata: string | null;
  createdAt: string;
};

export type McpServerInstallInput = {
  id?: string;
  displayName: string;
  serverConfig: McpServerConfigInput;
  userConfigValues?: McpServerUserConfigValuesInput;
  /**
   * OAuth provider name (e.g., google, slack-browser, linkedin-browser)
   */
  oauthProvider?: string | null;
  oauthAccessToken?: string;
  oauthRefreshToken?: string;
  oauthExpiryDate?: string | null;
};

export type McpServerContainerLogsInput = {
  logs: string;
  containerName: string;
};

export type AvailableToolInput = {
  /**
   * Tool ID in format sanitizedServerId__sanitizedToolName
   */
  id: string;
  /**
   * Tool name
   */
  name: string;
  /**
   * Tool description
   */
  description?: string;
  /**
   * Tool input schema
   */
  inputSchema?: unknown;
  /**
   * MCP server ID
   */
  mcpServerId: string;
  /**
   * MCP server name
   */
  mcpServerName: string;
  /**
   * Tool analysis results
   */
  analysis: {
    /**
     * Analysis status
     */
    status: 'awaiting_ollama_model' | 'in_progress' | 'error' | 'completed';
    /**
     * Error message if analysis failed
     */
    error: string | null;
    /**
     * Whether the tool is read-only
     */
    is_read: boolean | null;
    /**
     * Whether the tool writes data
     */
    is_write: boolean | null;
    /**
     * Whether the tool is idempotent
     */
    idempotent: boolean | null;
    /**
     * Whether the tool actions are reversible
     */
    reversible: boolean | null;
  };
};

export type MemoryEntryInput = {
  id: number;
  name: string;
  value: string;
  createdAt: string;
  updatedAt: string;
};

export type MemoryListResponseInput = {
  memories: Array<MemoryEntryInput>;
};

export type MemoryResponseInput = {
  memory: MemoryEntryInput | null;
};

export type LegacyMemoryResponseInput = {
  content: string;
};

export type CreateMemoryInput = {
  /**
   * Name/key for the memory entry
   */
  name: string;
  /**
   * Value/content of the memory entry
   */
  value: string;
};

export type DeleteResponseInput = {
  success: boolean;
  deleted?: boolean;
  count?: number;
};

export type WriteMemoryInput = {
  /**
   * Markdown content to store as memory
   */
  content: string;
};

export type OllamaRequiredModelStatusInput = {
  model: string;
  reason: string;
  installed: boolean;
};

export type SandboxActionResponseInput = {
  success: boolean;
  message: string;
};

export type UserInput = {
  id: number;
  hasCompletedOnboarding: boolean;
  collectTelemetryData: boolean;
  createdAt: string;
  updatedAt: string;
};

export type ToolAnalysisResult = {
  is_read: boolean;
  is_write: boolean;
  idempotent: boolean;
  reversible: boolean;
};

export type Tool = {
  id: string;
  mcp_server_id: string;
  name: string;
  description: string | null;
  input_schema:
    | (
        | (string | number | boolean | null)
        | {
            [key: string]: unknown;
          }
        | Array<unknown>
      )
    | null;
  is_read: boolean | null;
  is_write: boolean | null;
  idempotent: boolean | null;
  reversible: boolean | null;
  analyzed_at: string | null;
  created_at: string;
  updated_at: string;
};

export type SandboxStatusSummary = {
  status: 'not_installed' | 'initializing' | 'running' | 'error' | 'stopping' | 'stopped';
  runtime: {
    startupPercentage: number;
    startupMessage: string | null;
    startupError: string | null;
  };
  mcpServers: {
    [key: string]: {
      container: PodmanContainerStatusSummary;
      tools: Array<AvailableTool>;
    };
  };
  allAvailableTools?: Array<AvailableTool>;
};

export type PodmanContainerStatusSummary = {
  startupPercentage: number;
  state:
    | 'not_created'
    | 'created'
    | 'initializing'
    | 'running'
    | 'error'
    | 'restarting'
    | 'stopping'
    | 'stopped'
    | 'exited';
  message: string | null;
  error: string | null;
};

export type OllamaModelDownloadProgress = {
  model: string;
  status: 'downloading' | 'verifying' | 'completed' | 'error';
  progress: number;
  message: string;
};

export type WebSocketMessage =
  | {
      type: 'chat-title-updated';
      payload: {
        chatId: number;
        title: string;
      };
    }
  | {
      type: 'sandbox-status-update';
      payload: SandboxStatusSummary;
    }
  | {
      type: 'ollama-model-download-progress';
      payload: OllamaModelDownloadProgress;
    }
  | {
      type: 'memory-updated';
      payload: {
        memories: Array<{
          id: number;
          name: string;
          value: string;
          createdAt: string;
          updatedAt: string;
        }>;
      };
    };

export type ChatWithMessages = {
  id: number;
  sessionId: string;
  title: string | null;
  createdAt: string;
  updatedAt: string;
  messages: Array<{
    id: string;
    chatId: number;
    role: 'user' | 'assistant' | 'system';
    content: unknown;
    createdAt: string;
  }>;
};

export type CloudProviderWithConfig = {
  type: SupportedCloudProviders;
  name: string;
  apiKeyUrl: string;
  apiKeyPlaceholder: string;
  baseUrl: string;
  models: Array<string>;
  headers?: {
    [key: string]: string;
  };
  configured: boolean;
  enabled: boolean;
  validatedAt: string | null;
};

export type SupportedCloudProviders = 'anthropic' | 'openai' | 'deepseek' | 'gemini' | 'ollama';

export type SupportedCloudProviderModel = {
  id: string;
  provider: SupportedCloudProviders;
};

export type ExternalMcpClient = {
  clientName: string;
  createdAt: string;
};

export type ExternalMcpClientName = 'claude' | 'cursor' | 'vscode';

export type McpRequestLog = {
  id: number;
  requestId: string;
  sessionId: string | null;
  mcpSessionId: string | null;
  serverName: string;
  clientInfo: {
    userAgent?: string;
    clientName?: string;
    clientVersion?: string;
    clientPlatform?: string;
  };
  method: string | null;
  requestHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  requestBody: string | null;
  responseBody: string | null;
  responseHeaders:
    | (string | number | boolean | null)
    | {
        [key: string]: unknown;
      }
    | Array<unknown>;
  statusCode: number;
  errorMessage: string | null;
  durationMs: number | null;
  timestamp: string;
};

export type McpRequestLogStats = {
  totalRequests: number;
  successCount: number;
  errorCount: number;
  avgDurationMs: number;
  requestsPerServer: {
    [key: string]: number;
  };
};

export type McpRequestLogFilterStatus = 'HTTP 200' | 'HTTP 40x' | 'HTTP 50x';

export type McpServerConfig = {
  command: string;
  args?: Array<string>;
  env?: {
    [key: string]: string;
  };
};

export type McpServerUserConfigValues = {
  [key: string]: string | number | boolean | Array<string>;
};

export type McpServer = {
  id: string;
  name: string;
  serverConfig: McpServerConfig;
  userConfigValues: McpServerUserConfigValues | null;
  oauthAccessToken: string | null;
  oauthRefreshToken: string | null;
  oauthExpiryDate: string | null;
  oauthDiscoveryMetadata: string | null;
  createdAt: string;
};

export type McpServerInstall = {
  id?: string;
  displayName: string;
  serverConfig: McpServerConfig;
  userConfigValues?: McpServerUserConfigValues;
  /**
   * OAuth provider name (e.g., google, slack-browser, linkedin-browser)
   */
  oauthProvider?: string | null;
  oauthAccessToken?: string;
  oauthRefreshToken?: string;
  oauthExpiryDate?: string | null;
};

export type McpServerContainerLogs = {
  logs: string;
  containerName: string;
};

export type AvailableTool = {
  /**
   * Tool ID in format sanitizedServerId__sanitizedToolName
   */
  id: string;
  /**
   * Tool name
   */
  name: string;
  /**
   * Tool description
   */
  description?: string;
  /**
   * Tool input schema
   */
  inputSchema?: unknown;
  /**
   * MCP server ID
   */
  mcpServerId: string;
  /**
   * MCP server name
   */
  mcpServerName: string;
  /**
   * Tool analysis results
   */
  analysis: {
    /**
     * Analysis status
     */
    status: 'awaiting_ollama_model' | 'in_progress' | 'error' | 'completed';
    /**
     * Error message if analysis failed
     */
    error: string | null;
    /**
     * Whether the tool is read-only
     */
    is_read: boolean | null;
    /**
     * Whether the tool writes data
     */
    is_write: boolean | null;
    /**
     * Whether the tool is idempotent
     */
    idempotent: boolean | null;
    /**
     * Whether the tool actions are reversible
     */
    reversible: boolean | null;
  };
};

export type MemoryEntry = {
  id: number;
  name: string;
  value: string;
  createdAt: string;
  updatedAt: string;
};

export type MemoryListResponse = {
  memories: Array<MemoryEntry>;
};

export type MemoryResponse = {
  memory: MemoryEntry | null;
};

export type LegacyMemoryResponse = {
  content: string;
};

export type CreateMemory = {
  /**
   * Name/key for the memory entry
   */
  name: string;
  /**
   * Value/content of the memory entry
   */
  value: string;
};

export type DeleteResponse = {
  success: boolean;
  deleted?: boolean;
  count?: number;
};

export type WriteMemory = {
  /**
   * Markdown content to store as memory
   */
  content: string;
};

export type OllamaRequiredModelStatus = {
  model: string;
  reason: string;
  installed: boolean;
};

export type SandboxActionResponse = {
  success: boolean;
  message: string;
};

export type User = {
  id: number;
  hasCompletedOnboarding: boolean;
  collectTelemetryData: boolean;
  createdAt: string;
  updatedAt: string;
};

export type GetChatsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/chat';
};

export type GetChatsResponses = {
  /**
   * Default Response
   */
  200: Array<ChatWithMessages>;
};

export type GetChatsResponse = GetChatsResponses[keyof GetChatsResponses];

export type CreateChatData = {
  body?: {
    [key: string]: unknown;
  };
  path?: never;
  query?: never;
  url: '/api/chat';
};

export type CreateChatResponses = {
  /**
   * Default Response
   */
  201: ChatWithMessages;
};

export type CreateChatResponse = CreateChatResponses[keyof CreateChatResponses];

export type DeleteChatData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type DeleteChatErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type DeleteChatError = DeleteChatErrors[keyof DeleteChatErrors];

export type DeleteChatResponses = {
  /**
   * Default Response
   */
  204: void;
};

export type DeleteChatResponse = DeleteChatResponses[keyof DeleteChatResponses];

export type GetChatByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type GetChatByIdErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type GetChatByIdError = GetChatByIdErrors[keyof GetChatByIdErrors];

export type GetChatByIdResponses = {
  /**
   * Default Response
   */
  200: ChatWithMessages;
};

export type GetChatByIdResponse = GetChatByIdResponses[keyof GetChatByIdResponses];

export type UpdateChatData = {
  body?: {
    title?: string | null;
  };
  path: {
    id: string;
  };
  query?: never;
  url: '/api/chat/{id}';
};

export type UpdateChatErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type UpdateChatError = UpdateChatErrors[keyof UpdateChatErrors];

export type UpdateChatResponses = {
  /**
   * Default Response
   */
  200: ChatWithMessages;
};

export type UpdateChatResponse = UpdateChatResponses[keyof UpdateChatResponses];

export type GetAvailableCloudProvidersData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/cloud-providers/available';
};

export type GetAvailableCloudProvidersResponses = {
  /**
   * Default Response
   */
  200: Array<CloudProviderWithConfig>;
};

export type GetAvailableCloudProvidersResponse =
  GetAvailableCloudProvidersResponses[keyof GetAvailableCloudProvidersResponses];

export type ConfigureCloudProviderData = {
  body: {
    type: SupportedCloudProvidersInput;
    apiKey: string;
  };
  path?: never;
  query?: never;
  url: '/api/cloud-providers';
};

export type ConfigureCloudProviderResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type ConfigureCloudProviderResponse = ConfigureCloudProviderResponses[keyof ConfigureCloudProviderResponses];

export type DeleteCloudProviderData = {
  body?: never;
  path: {
    type: SupportedCloudProvidersInput;
  };
  query?: never;
  url: '/api/cloud-providers/{type}';
};

export type DeleteCloudProviderResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type DeleteCloudProviderResponse = DeleteCloudProviderResponses[keyof DeleteCloudProviderResponses];

export type GetCloudProviderModelsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/cloud-providers/models';
};

export type GetCloudProviderModelsResponses = {
  /**
   * Default Response
   */
  200: Array<SupportedCloudProviderModel>;
};

export type GetCloudProviderModelsResponse = GetCloudProviderModelsResponses[keyof GetCloudProviderModelsResponses];

export type GetConnectedExternalMcpClientsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/external_mcp_client';
};

export type GetConnectedExternalMcpClientsResponses = {
  /**
   * Default Response
   */
  200: Array<ExternalMcpClient>;
};

export type GetConnectedExternalMcpClientsResponse =
  GetConnectedExternalMcpClientsResponses[keyof GetConnectedExternalMcpClientsResponses];

export type GetSupportedExternalMcpClientsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/external_mcp_client/supported';
};

export type GetSupportedExternalMcpClientsResponses = {
  /**
   * Default Response
   */
  200: Array<ExternalMcpClientName>;
};

export type GetSupportedExternalMcpClientsResponse =
  GetSupportedExternalMcpClientsResponses[keyof GetSupportedExternalMcpClientsResponses];

export type ConnectExternalMcpClientData = {
  body: {
    clientName: ExternalMcpClientNameInput;
  };
  path?: never;
  query?: never;
  url: '/api/external_mcp_client/connect';
};

export type ConnectExternalMcpClientResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type ConnectExternalMcpClientResponse =
  ConnectExternalMcpClientResponses[keyof ConnectExternalMcpClientResponses];

export type DisconnectExternalMcpClientData = {
  body?: never;
  path: {
    clientName: ExternalMcpClientNameInput;
  };
  query?: never;
  url: '/api/external_mcp_client/{clientName}/disconnect';
};

export type DisconnectExternalMcpClientResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type DisconnectExternalMcpClientResponse =
  DisconnectExternalMcpClientResponses[keyof DisconnectExternalMcpClientResponses];

export type ClearMcpRequestLogsData = {
  body: {
    clearAll: boolean;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_request_log';
};

export type ClearMcpRequestLogsResponses = {
  /**
   * Default Response
   */
  200: {
    cleared: number;
  };
};

export type ClearMcpRequestLogsResponse = ClearMcpRequestLogsResponses[keyof ClearMcpRequestLogsResponses];

export type GetMcpRequestLogsData = {
  body?: never;
  path?: never;
  query?: {
    mcpSessionId?: string;
    serverName?: string;
    method?: string;
    status?: McpRequestLogFilterStatusInput;
    search?: string;
    dateFrom?: string;
    dateTo?: string;
    page?: number;
    pageSize?: number;
  };
  url: '/api/mcp_request_log';
};

export type GetMcpRequestLogsResponses = {
  /**
   * Default Response
   */
  200: {
    data: Array<McpRequestLog>;
    total: number;
    page: number;
    pageSize: number;
  };
};

export type GetMcpRequestLogsResponse = GetMcpRequestLogsResponses[keyof GetMcpRequestLogsResponses];

export type GetMcpRequestLogByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/mcp_request_log/{id}';
};

export type GetMcpRequestLogByIdErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type GetMcpRequestLogByIdError = GetMcpRequestLogByIdErrors[keyof GetMcpRequestLogByIdErrors];

export type GetMcpRequestLogByIdResponses = {
  /**
   * Default Response
   */
  200: McpRequestLog;
};

export type GetMcpRequestLogByIdResponse = GetMcpRequestLogByIdResponses[keyof GetMcpRequestLogByIdResponses];

export type GetMcpRequestLogStatsData = {
  body?: never;
  path?: never;
  query?: {
    mcpSessionId?: string;
    serverName?: string;
    method?: string;
    status?: McpRequestLogFilterStatusInput;
    search?: string;
    dateFrom?: string;
    dateTo?: string;
  };
  url: '/api/mcp_request_log/stats';
};

export type GetMcpRequestLogStatsResponses = {
  /**
   * Default Response
   */
  200: McpRequestLogStats;
};

export type GetMcpRequestLogStatsResponse = GetMcpRequestLogStatsResponses[keyof GetMcpRequestLogStatsResponses];

export type GetMcpServersData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/mcp_server';
};

export type GetMcpServersResponses = {
  /**
   * Default Response
   */
  200: Array<McpServer>;
};

export type GetMcpServersResponse = GetMcpServersResponses[keyof GetMcpServersResponses];

export type InstallMcpServerData = {
  body?: McpServerInstallInput;
  path?: never;
  query?: never;
  url: '/api/mcp_server/install';
};

export type InstallMcpServerErrors = {
  /**
   * Default Response
   */
  400: {
    error: string;
  };
  /**
   * Default Response
   */
  500: {
    error: string;
  };
};

export type InstallMcpServerError = InstallMcpServerErrors[keyof InstallMcpServerErrors];

export type InstallMcpServerResponses = {
  /**
   * Default Response
   */
  200: McpServer;
};

export type InstallMcpServerResponse = InstallMcpServerResponses[keyof InstallMcpServerResponses];

export type UninstallMcpServerData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: '/api/mcp_server/{id}';
};

export type UninstallMcpServerResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type UninstallMcpServerResponse = UninstallMcpServerResponses[keyof UninstallMcpServerResponses];

export type GetMcpServerLogsData = {
  body?: never;
  path: {
    id: string;
  };
  query?: {
    lines?: number;
  };
  url: '/mcp_proxy/{id}/logs';
};

export type GetMcpServerLogsErrors = {
  /**
   * Default Response
   */
  404: {
    error: string;
  };
};

export type GetMcpServerLogsError = GetMcpServerLogsErrors[keyof GetMcpServerLogsErrors];

export type GetMcpServerLogsResponses = {
  /**
   * Default Response
   */
  200: McpServerContainerLogs;
};

export type GetMcpServerLogsResponse = GetMcpServerLogsResponses[keyof GetMcpServerLogsResponses];

export type GetAvailableToolsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/mcp_server/tools';
};

export type GetAvailableToolsResponses = {
  /**
   * Default Response
   */
  200: Array<AvailableTool>;
};

export type GetAvailableToolsResponse = GetAvailableToolsResponses[keyof GetAvailableToolsResponses];

export type DeleteAllMemoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/memories';
};

export type DeleteAllMemoriesResponses = {
  /**
   * Default Response
   */
  200: DeleteResponse;
};

export type DeleteAllMemoriesResponse = DeleteAllMemoriesResponses[keyof DeleteAllMemoriesResponses];

export type GetAllMemoriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/memories';
};

export type GetAllMemoriesResponses = {
  /**
   * Default Response
   */
  200: MemoryListResponse;
};

export type GetAllMemoriesResponse = GetAllMemoriesResponses[keyof GetAllMemoriesResponses];

export type DeleteMemoryData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/memories/{name}';
};

export type DeleteMemoryResponses = {
  /**
   * Default Response
   */
  200: DeleteResponse;
};

export type DeleteMemoryResponse = DeleteMemoryResponses[keyof DeleteMemoryResponses];

export type GetMemoryByNameData = {
  body?: never;
  path: {
    name: string;
  };
  query?: never;
  url: '/api/memories/{name}';
};

export type GetMemoryByNameResponses = {
  /**
   * Default Response
   */
  200: MemoryResponse;
};

export type GetMemoryByNameResponse = GetMemoryByNameResponses[keyof GetMemoryByNameResponses];

export type SetMemoryData = {
  body: {
    value: string;
  };
  path: {
    name: string;
  };
  query?: never;
  url: '/api/memories/{name}';
};

export type SetMemoryResponses = {
  /**
   * Default Response
   */
  200: MemoryEntry;
};

export type SetMemoryResponse = SetMemoryResponses[keyof SetMemoryResponses];

export type GetMemoryData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/memory';
};

export type GetMemoryResponses = {
  /**
   * Default Response
   */
  200: LegacyMemoryResponse;
};

export type GetMemoryResponse = GetMemoryResponses[keyof GetMemoryResponses];

export type UpdateMemoryData = {
  body?: WriteMemoryInput;
  path?: never;
  query?: never;
  url: '/api/memory';
};

export type UpdateMemoryResponses = {
  /**
   * Default Response
   */
  200: {
    success: boolean;
  };
};

export type UpdateMemoryResponse = UpdateMemoryResponses[keyof UpdateMemoryResponses];

export type StartMcpServerOauthData = {
  body: {
    catalogName: string;
    installData: McpServerInstallInput;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_server/start_oauth';
};

export type StartMcpServerOauthErrors = {
  /**
   * Default Response
   */
  500: {
    error: string;
  };
};

export type StartMcpServerOauthError = StartMcpServerOauthErrors[keyof StartMcpServerOauthErrors];

export type StartMcpServerOauthResponses = {
  /**
   * Default Response
   */
  200: {
    authUrl: string;
    state: string;
  };
};

export type StartMcpServerOauthResponse = StartMcpServerOauthResponses[keyof StartMcpServerOauthResponses];

export type OauthCallbackData = {
  body?: never;
  path?: never;
  query: {
    code: string;
    state: string;
    error?: string;
    error_description?: string;
  };
  url: '/api/oauth/callback';
};

export type OauthCallbackResponses = {
  /**
   * Default Response
   */
  200: unknown;
};

export type CompleteMcpServerOauthData = {
  body: {
    service: string;
    state: string;
    access_token?: string;
    refresh_token?: string;
    expiry_date?: string;
    code?: string;
  };
  path?: never;
  query?: never;
  url: '/api/mcp_server/complete_oauth';
};

export type CompleteMcpServerOauthErrors = {
  /**
   * Default Response
   */
  400: {
    error: string;
  };
  /**
   * Default Response
   */
  500: {
    error: string;
  };
};

export type CompleteMcpServerOauthError = CompleteMcpServerOauthErrors[keyof CompleteMcpServerOauthErrors];

export type CompleteMcpServerOauthResponses = {
  /**
   * Default Response
   */
  200: McpServer;
};

export type CompleteMcpServerOauthResponse = CompleteMcpServerOauthResponses[keyof CompleteMcpServerOauthResponses];

export type GetOllamaRequiredModelsStatusData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/ollama/required-models';
};

export type GetOllamaRequiredModelsStatusResponses = {
  /**
   * Default Response
   */
  200: {
    models: Array<OllamaRequiredModelStatus>;
  };
};

export type GetOllamaRequiredModelsStatusResponse =
  GetOllamaRequiredModelsStatusResponses[keyof GetOllamaRequiredModelsStatusResponses];

export type RestartSandboxData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sandbox/restart';
};

export type RestartSandboxErrors = {
  /**
   * Default Response
   */
  500: {
    error: string;
  };
};

export type RestartSandboxError = RestartSandboxErrors[keyof RestartSandboxErrors];

export type RestartSandboxResponses = {
  /**
   * Default Response
   */
  200: SandboxActionResponse;
};

export type RestartSandboxResponse = RestartSandboxResponses[keyof RestartSandboxResponses];

export type ResetSandboxData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/sandbox/reset';
};

export type ResetSandboxErrors = {
  /**
   * Default Response
   */
  500: {
    error: string;
  };
};

export type ResetSandboxError = ResetSandboxErrors[keyof ResetSandboxErrors];

export type ResetSandboxResponses = {
  /**
   * Default Response
   */
  200: SandboxActionResponse;
};

export type ResetSandboxResponse = ResetSandboxResponses[keyof ResetSandboxResponses];

export type GetUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/api/user';
};

export type GetUserResponses = {
  /**
   * Default Response
   */
  200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
  body?: {
    hasCompletedOnboarding?: boolean;
    collectTelemetryData?: boolean;
  };
  path?: never;
  query?: never;
  url: '/api/user';
};

export type UpdateUserResponses = {
  /**
   * Default Response
   */
  200: User;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
