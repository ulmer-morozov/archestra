name: Linting and Tests

on:
  workflow_call:

jobs:
  lint-pr-title:
    name: PR Title Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Lint PR title
        uses: grafana/shared-workflows/actions/lint-pr-title@19d8fb5687bb386849f7f53673c5f429e6387cf5 # v1.2.0
        with:
          config-path: "${{ github.workspace }}/.github/commitlint.config.js"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  desktop-app-linting-and-tests:
    name: Desktop App Linting and Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./desktop_app
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Check prettier formatting
        run: pnpm prettier --check .

      - name: Check ts types
        run: pnpm typecheck

      - name: Run tests
        run: pnpm test

      # TODO: add this later
      # - name: Build
      #   run: pnpm make

  verify-codegend-code-is-up-to-date:
    name: Verify generated code is up to date
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./desktop_app
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: true
          # Only use PR head ref if it's not from a fork (forks can't push back to the original repo)
          ref: ${{ github.event.pull_request.head.repo.fork == false && github.event.pull_request.head.ref || '' }}

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Check for codegen'd changes
        id: codegen-changes
        run: |
          pnpm codegen:all

          # Check both unstaged and staged changes
          if ! git diff --exit-code || ! git diff --cached --exit-code; then
            echo "Generated code is not up to date - committing changes"
            echo "codegen-changes=true" >> $GITHUB_OUTPUT
          else
            echo "Generated code is up to date"
            echo "codegen-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Add and commit generated code
        # Only commit if changes exist and it's not a PR from a fork
        if: steps.codegen-changes.outputs.codegen-changes == 'true' && github.event.pull_request.head.repo.fork == false
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        with:
          message: "chore: update generated code"
          committer_name: GitHub Actions
          committer_email: 41898282+github-actions[bot]@users.noreply.github.com

      - name: Fail if PR from a fork has uncommitted codegen changes
        if: steps.codegen-changes.outputs.codegen-changes == 'true' && github.event.pull_request.head.repo.fork == true
        run: |
          echo "::error::Generated code is not up to date. Please run 'pnpm codegen:all' locally and commit the changes."
          exit 1

  verify-no-pending-database-migrations:
    name: Verify no pending database migrations
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./desktop_app
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: true
          # Only use PR head ref if it's not a PR from a fork (forks can't push back to the original repo)
          ref: ${{ github.event.pull_request.head.repo.fork == false && github.event.pull_request.head.ref || '' }}

      - name: Setup environment
        uses: ./.github/actions/setup-env

      - name: Verify no pending database migrations
        id: db-migration-check
        run: |
          # Run db generate with timeout to prevent hanging on interactive prompts
          set +e  # Don't exit on command failure

          echo "Running pnpm db generate -- awaiting up to 15 seconds for a potential drizzle-kit generate interactive prompt (which could indicate a pending database migration, such as a table rename)"

          # Use timeout and expect no interaction - if it hangs, it means there's a pending migration which requires
          # user input to continue
          if timeout 15s pnpm db generate > /tmp/db_generate_output.txt 2>&1; then
            # Command completed successfully within timeout
            output=$(cat /tmp/db_generate_output.txt)
            echo "Output from pnpm db generate:"
            echo "$output"

            # Check if there's an interactive prompt in the output (shouldn't happen if it completed)
            if echo "$output" | grep -q "❯\|Is.*table created or renamed"; then
              echo "❌ Interactive prompt detected - there are pending database migrations that need to be committed"
              echo "Run 'pnpm db generate' locally, make your choices, and commit the resulting migration files"
              exit 1
            fi
          else
            # Command timed out or failed
            exit_code=$?
            output=$(cat /tmp/db_generate_output.txt 2>/dev/null || echo "No output captured")

            echo "Output from pnpm db generate (before timeout/failure):"
            echo "$output"

            if [ $exit_code -eq 124 ]; then
              # Timeout occurred - likely waiting for interactive input
              echo "❌ Command timed out - likely waiting for interactive input about pending database migrations"
              echo "Run 'pnpm db generate' locally, make your choices, and commit the resulting migration files"
            else
              echo "❌ pnpm db generate failed with exit code $exit_code"
            fi
            exit 1
          fi

          set -e  # Re-enable exit on error

          # Check both unstaged and staged changes
          if ! git diff --exit-code || ! git diff --cached --exit-code; then
            echo "New migration files were generated - committing changes"
            echo "db-migration-check=true" >> $GITHUB_OUTPUT
          else
            echo "No new migration files were generated"
            echo "db-migration-check=false" >> $GITHUB_OUTPUT
          fi

      - name: Add and commit database migration changes
        # Only commit if changes exist and it's not a PR from a fork
        if: steps.db-migration-check.outputs.db-migration-check == 'true' && github.event.pull_request.head.repo.fork == false
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        with:
          message: "chore: update database migrations"
          committer_name: GitHub Actions
          committer_email: 41898282+github-actions[bot]@users.noreply.github.com

      - name: Fail if PR from a fork has uncommitted migration changes
        if: steps.db-migration-check.outputs.db-migration-check == 'true' && github.event.pull_request.head.repo.fork == true
        run: |
          echo "::error::Database migrations need to be generated. Please run 'pnpm db:generate' locally and commit the changes."
          exit 1

  zizmor:
    name: Zizmor GitHub Actions static analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Run zizmor 🌈
        uses: zizmorcore/zizmor-action@f52a838cfabf134edcbaa7c8b3677dde20045018 # v0.1.1

  build-mcp-server-base-image:
    name: Build MCP Server Base Docker Image
    permissions:
      contents: read
      id-token: write # Required for Workload Identity Federation
    uses: ./.github/workflows/build-base-mcp-server-docker-image.yml
    with:
      push_to_gcr: false
      version: ${{ github.sha }}
