name: On Pull Requests

on:
  workflow_call:
    inputs:
      dry_run:
        description: Whether to run publish in dry run mode or not (i.e. don't actually upload the build to GitHub)
        type: boolean
        required: false
        default: false
    secrets:
      ARCHESTRA_RELEASER_GITHUB_APP_ID:
        required: true
      ARCHESTRA_RELEASER_GITHUB_APP_PRIVATE_KEY:
        required: true
      APPLE_SIGNING_CERTIFICATE_BASE64:
        required: true
      APPLE_SIGNING_CERTIFICATE_PASSWORD:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      APPLE_ID:
        required: true
      APPLE_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true

jobs:
  build-desktop-application:
    name: Build desktop application (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        # https://docs.github.com/en/actions/how-tos/write-workflows/choose-where-workflows-run/choose-the-runner-for-a-job#standard-github-hosted-runners-for-public-repositories
        include:
          - platform: macos-latest # M1 (arm64)
            os: macos
            arch: arm64
          - platform: macos-13 # Intel (x64)
            os: macos
            arch: x64
          - platform: windows-11-arm
            os: windows
            arch: arm64
          - platform: windows-latest
            os: windows
            arch: x64
          - platform: ubuntu-latest
            os: linux
            arch: x64
          - platform: ubuntu-24.04-arm
            os: linux
            arch: arm64
    permissions:
      # publisher requires write permissions to the repo's contents to create new releases
      # https://www.electronforge.io/config/publishers/github#authentication
      contents: write
    defaults:
      run:
        working-directory: desktop_app
    steps:
      - name: Checkout project
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Generate a token
        id: generate-token
        # Only generate app token if secrets are available (not for PRs from forks)
        if: ${{ github.event.pull_request.head.repo.fork == false }}
        uses: ./.github/actions/generate-release-token
        with:
          app-id: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_ID }}
          private-key: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_PRIVATE_KEY }}

      - name: Setup environment
        uses: ./.github/actions/setup-env

      # See https://brunoscheufler.com/blog/2023-11-12-setting-up-hosted-macos-github-actions-workflows-for-electron-builds
      # was super helpful for getting macOS signing working on GitHub Actions
      #
      # See also:
      # https://docs.github.com/en/actions/how-tos/deploy/deploy-to-third-party-platforms/sign-xcode-applications
      # https://help.apple.com/xcode/mac/current/#/dev154b28f09
      - name: Install Apple codesigning certificate
        if: matrix.os == 'macos' && github.event.pull_request.head.repo.fork == false
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build desktop application
        env:
          # Use app token if available, fallback to GITHUB_TOKEN for fork PRs
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}
          # These will be empty for fork PRs, which is fine - forge.config.ts handles it
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: pnpm run publish${{ inputs.dry_run && ' --dry-run' || '' }}

      # https://brunoscheufler.com/blog/2023-11-12-setting-up-hosted-macos-github-actions-workflows-for-electron-builds
      - name: Clean up keychain
        if: ${{ always() && matrix.os == 'macos' && github.event.pull_request.head.repo.fork == false }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
